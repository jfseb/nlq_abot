"use strict";
/**
 * Functionality managing the match models
 *
 * @file
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getMetaFactory = exports.RELATION_isCategoryOf = exports.RELATION_hasCategory = exports.getStringArray = exports.AMeta = void 0;
//import * as intf from 'constants';
const debug = require("debug");
var debuglog = debug('meta');
/**
 * the model path, may be controlled via environment variable
 */
var modelPath = process.env["ABOT_MODELPATH"] || "testmodel";
const separator = " -:- ";
const validTypes = ["relation", "category", "domain"];
class AMeta {
    constructor(type, name) {
        if (validTypes.indexOf(type) < 0) {
            throw new Error("Illegal Type " + type);
        }
        this.name = name;
        this.type = type;
    }
    toName() {
        return this.name;
    }
    toFullString() {
        return this.type + separator + this.name;
    }
    toType() {
        return this.type;
    }
}
exports.AMeta = AMeta;
function getStringArray(arr) {
    return arr.map(function (oMeta) {
        return oMeta.toName();
    });
}
exports.getStringArray = getStringArray;
exports.RELATION_hasCategory = "hasCategory";
exports.RELATION_isCategoryOf = "isCategoryOf";
function parseAMeta(a) {
    var r = a.split(separator);
    if (!r || r.length !== 2) {
        throw new Error("cannot parse " + a + " as Meta");
    }
    switch (r[0]) {
        case "category":
            return getMetaFactory().Category(r[1]);
        case "relation":
            return getMetaFactory().Relation(r[1]);
        case "domain":
            return getMetaFactory().Domain(r[1]);
        default:
            throw new Error("unknown meta type" + r[0]);
    }
}
function getMetaFactory() {
    return {
        Domain: function (a) {
            return new AMeta("domain", a);
        },
        Category: function (a) {
            return new AMeta("category", a);
        },
        Relation: function (a) {
            return new AMeta("relation", a);
        },
        parseIMeta: parseAMeta
    };
}
exports.getMetaFactory = getMetaFactory;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFVLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsQ0FBQztRQUNELFVBQVUsRUFBRyxVQUFVO0tBQzNCLENBQUM7QUFDTCxDQUFDO0FBYkQsd0NBYUMiLCJmaWxlIjoibW9kZWwvbWV0YS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBGdW5jdGlvbmFsaXR5IG1hbmFnaW5nIHRoZSBtYXRjaCBtb2RlbHNcclxuICpcclxuICogQGZpbGVcclxuICovXHJcblxyXG4vL2ltcG9ydCAqIGFzIGludGYgZnJvbSAnY29uc3RhbnRzJztcclxuXHJcbmltcG9ydCAqIGFzIGRlYnVnIGZyb20gJ2RlYnVnJztcclxuXHJcbnZhciBkZWJ1Z2xvZyA9IGRlYnVnKCdtZXRhJyk7XHJcblxyXG5pbXBvcnQgKiAgYXMgSU1hdGNoIGZyb20gJy4uL21hdGNoL2lmbWF0Y2gnO1xyXG5pbXBvcnQgKiBhcyBNb2RlbCBmcm9tICcuL21vZGVsJztcclxuXHJcblxyXG4vKipcclxuICogdGhlIG1vZGVsIHBhdGgsIG1heSBiZSBjb250cm9sbGVkIHZpYSBlbnZpcm9ubWVudCB2YXJpYWJsZVxyXG4gKi9cclxudmFyIG1vZGVsUGF0aCA9IHByb2Nlc3MuZW52W1wiQUJPVF9NT0RFTFBBVEhcIl0gfHwgXCJ0ZXN0bW9kZWxcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU1ldGEge1xyXG4gICAgdG9OYW1lKCkgIDogc3RyaW5nLFxyXG4gICAgdG9UeXBlKCkgIDogc3RyaW5nLFxyXG4gICAgdG9GdWxsU3RyaW5nKCkgOiBzdHJpbmdcclxufVxyXG5cclxuXHJcbmNvbnN0IHNlcGFyYXRvciA9IFwiIC06LSBcIjtcclxuY29uc3QgdmFsaWRUeXBlcyA9IFtcInJlbGF0aW9uXCIsIFwiY2F0ZWdvcnlcIiwgXCJkb21haW5cIl07XHJcblxyXG5leHBvcnQgY2xhc3MgQU1ldGEgaW1wbGVtZW50cyBJTWV0YSB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICB0eXBlIDogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3IodHlwZSA6IHN0cmluZywgbmFtZSA6IHN0cmluZykge1xyXG4gICAgICAgIGlmKHZhbGlkVHlwZXMuaW5kZXhPZih0eXBlKSA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSWxsZWdhbCBUeXBlIFwiICsgdHlwZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcclxuICAgIH1cclxuICAgIHRvTmFtZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5uYW1lO1xyXG4gICAgfVxyXG4gICAgdG9GdWxsU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUgKyBzZXBhcmF0b3IgKyB0aGlzLm5hbWU7XHJcbiAgICB9XHJcbiAgICB0b1R5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTWV0YSB7XHJcbiAgICBwYXJzZUlNZXRhIDogKHN0cmluZykgPT4gSU1ldGEsXHJcbiAgICAvLyBjb25zdHJ1Y3RvcnNcclxuICAgIERvbWFpbiA6IChzdHJpbmcpID0+IElNZXRhLFxyXG4gICAgQ2F0ZWdvcnkgOiAoc3RyaW5nKSA9PiBJTWV0YSxcclxuICAgIFJlbGF0aW9uIDogKHN0cmluZykgPT4gSU1ldGFcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0cmluZ0FycmF5KGFyciA6IElNZXRhW10pIHtcclxuICAgIHJldHVybiBhcnIubWFwKGZ1bmN0aW9uKG9NZXRhIDogSU1ldGEpIHtcclxuICAgICAgICByZXR1cm4gb01ldGEudG9OYW1lKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IFJFTEFUSU9OX2hhc0NhdGVnb3J5ID0gXCJoYXNDYXRlZ29yeVwiO1xyXG5leHBvcnQgY29uc3QgUkVMQVRJT05faXNDYXRlZ29yeU9mID0gXCJpc0NhdGVnb3J5T2ZcIjtcclxuXHJcbmZ1bmN0aW9uIHBhcnNlQU1ldGEoYSA6IHN0cmluZykgOiBJTWV0YSB7XHJcbiAgICAgICAgICAgIHZhciByID0gYS5zcGxpdChzZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICBpZighciB8fCByLmxlbmd0aCAhPT0gMikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IHBhcnNlIFwiICsgYSArIFwiIGFzIE1ldGFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc3dpdGNoKHJbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJjYXRlZ29yeVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZXRNZXRhRmFjdG9yeSgpLkNhdGVnb3J5KHJbMV0pO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcInJlbGF0aW9uXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldE1ldGFGYWN0b3J5KCkuUmVsYXRpb24oclsxXSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiZG9tYWluXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGdldE1ldGFGYWN0b3J5KCkuRG9tYWluKHJbMV0pO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIG1ldGEgdHlwZVwiICsgclswXSk7XHJcbiAgICAgICAgICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldE1ldGFGYWN0b3J5KCkgOiBNZXRhIHtcclxuICByZXR1cm4ge1xyXG4gICAgICAgIERvbWFpbiA6IGZ1bmN0aW9uKGEgOiBzdHJpbmcpIDogSU1ldGEge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFNZXRhKFwiZG9tYWluXCIsIGEpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgQ2F0ZWdvcnkgOiBmdW5jdGlvbihhIDogc3RyaW5nKSA6IElNZXRhIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBBTWV0YShcImNhdGVnb3J5XCIsYSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBSZWxhdGlvbiA6IGZ1bmN0aW9uKGEgOiBzdHJpbmcpIDogSU1ldGEge1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IEFNZXRhKFwicmVsYXRpb25cIixhKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHBhcnNlSU1ldGEgOiBwYXJzZUFNZXRhXHJcbiAgIH07XHJcbn1cclxuIl19
