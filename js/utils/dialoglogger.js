"use strict";
/**
 * a logger for dialog conversations
 */
//declare module pg {};
Object.defineProperty(exports, "__esModule", { value: true });
exports.logger = exports.logAnswer = exports.assureColumnLengthNotExceeded = exports.sqlActive = void 0;
const debug = require("debug");
const process = require("process");
exports.sqlActive = !!(process.env.ABOT_LOGDB);
const debuglog = debug('dialoglogger');
;
;
const columns = ["botid", "userid", "message", "response", "action", "intent", "conversationId", "meta", "delta"];
// 0 indicates do not process /truncate, e.g. non string type
const columnLengths = [10, 40, 1024, 1024, 512, 20, 40, 0, 0];
function assureColumnLengthNotExceeded(obj) {
    columns.forEach(function (sCol, iIndex) {
        if (columnLengths[iIndex] && typeof obj[sCol] !== "string") {
            debuglog("Unexpected non-string value " + JSON.stringify(obj[sCol]));
            obj[sCol] = "" + obj[sCol];
        }
        if (obj[sCol] && columnLengths[iIndex] && obj[sCol].length > columnLengths[iIndex]) {
            obj[sCol] = obj[sCol].substring(0, columnLengths[iIndex]);
        }
    });
    return obj;
}
exports.assureColumnLengthNotExceeded = assureColumnLengthNotExceeded;
function logAnswer(answer, callback, ForceSqlActive) {
    "use strict";
    callback = callback || (function () { });
    var session = answer.session;
    var sqlIsActive = ForceSqlActive || exports.sqlActive;
    var pg = this.pg;
    debuglog("here user id of message session.message.address " +
        JSON.stringify(session.message.address.user));
    var oLogEntry = {
        botid: this.name,
        userid: session.message.address
            && session.message.address.user
            && session.message.address.user || "",
        message: session.message.text,
        response: answer.response,
        action: answer.action,
        intent: answer.intent,
        conversationId: session.message.address
            && session.message.address.conversationId || "",
        meta: answer.result || {},
        delta: Date.now() - Date.parse(session.message.timestamp),
    };
    oLogEntry = assureColumnLengthNotExceeded(oLogEntry);
    debuglog("sqlIsActive" + sqlIsActive);
    if (!sqlIsActive) {
        return;
    }
    if (pg) {
        pg.connect(this.dburl, (err, client /*pg.Client*/, pgDone) => {
            if (err) {
                // failed to acquire connection
                //logger.emit('error', err);
                debuglog('Error connecting to db' + err);
                callback(err);
            }
            else {
                var query = `INSERT INTO logconv (` + columns.join(",") + ") " +
                    //   (convid, sessionid, user, message, response, meta) ` +
                    "VALUES ( " +
                    // $1, $2, ...
                    columns.map(function (o, iIndex) { return "$" + (iIndex + 1); }).join(", ") + ")";
                var values = columns.map(function (sCol) {
                    return oLogEntry[sCol];
                });
                //  [level, msg, meta instanceof Array ? JSON.stringify(meta) : meta],
                client.query(query, values, (err, result) => {
                    pgDone();
                    if (err) {
                        // logger.emit('error', err);
                        debuglog('Error inserting record into db ' + err + '\n' +
                            values.join("\n"));
                        callback(err);
                    }
                    else {
                        //  logger.emit('logged');
                        callback(null, true);
                    }
                });
            }
        });
    }
    else {
        callback(null, true);
    }
}
exports.logAnswer = logAnswer;
var loggers = {};
function logger(name, dburl, pg) {
    if (typeof name !== "string" || !/^[A-Za-z][A-Za-z0-9_]+$/.exec(name)) {
        throw new Error('Logger name must be at least two alphanumeric characters');
    }
    if (!loggers[name]) {
        var alogger = {
            name: name,
            dburl: dburl,
            pg: pg
        };
        alogger.logIt = logAnswer.bind(alogger);
        loggers[name] = alogger;
    }
    if (loggers[name].dburl !== dburl) {
        throw new Error('Flags mismatch in logger' + name);
    }
    return loggers[name].logIt;
}
exports.logger = logger;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy9kaWFsb2dsb2dnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHO0FBQ0gsdUJBQXVCOzs7QUFHdkIsK0JBQStCO0FBQy9CLG1DQUFtQztBQUd4QixRQUFBLFNBQVMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBRWxELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQztBQU90QyxDQUFDO0FBZUQsQ0FBQztBQVVGLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBTyxFQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0FBQ2pILDZEQUE2RDtBQUM3RCxNQUFNLGFBQWEsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFFLENBQUM7QUFHOUQsU0FBZ0IsNkJBQTZCLENBQUMsR0FBZTtJQUMzRCxPQUFPLENBQUMsT0FBTyxDQUFDLFVBQVMsSUFBSSxFQUFDLE1BQU07UUFDbEMsSUFBRyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQU0sUUFBUSxFQUFFO1lBQzFELFFBQVEsQ0FBQyw4QkFBOEIsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckUsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7UUFDRCxJQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxhQUFhLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDakYsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQzFEO0lBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDSCxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFYRCxzRUFXQztBQUVELFNBQWdCLFNBQVMsQ0FBQyxNQUFlLEVBQUUsUUFBd0MsRUFBRyxjQUF5QjtJQUM3RyxZQUFZLENBQUM7SUFDYixRQUFRLEdBQUcsUUFBUSxJQUFJLENBQUMsY0FBWSxDQUFDLENBQUMsQ0FBQztJQUN2QyxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDO0lBQzdCLElBQUksV0FBVyxHQUFHLGNBQWMsSUFBSSxpQkFBUyxDQUFDO0lBQzlDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUM7SUFDakIsUUFBUSxDQUFDLGtEQUFrRDtRQUMzRCxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDOUMsSUFBSSxTQUFTLEdBQWU7UUFDMUIsS0FBSyxFQUFHLElBQUksQ0FBQyxJQUFJO1FBQ2pCLE1BQU0sRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU87ZUFDNUIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSTtlQUM1QixPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksRUFBRTtRQUNyQyxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJO1FBQzdCLFFBQVEsRUFBRyxNQUFNLENBQUMsUUFBUTtRQUMxQixNQUFNLEVBQUcsTUFBTSxDQUFDLE1BQU07UUFDdEIsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNO1FBQ3JCLGNBQWMsRUFBRSxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU87ZUFDcEMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsY0FBYyxJQUFJLEVBQUU7UUFDL0MsSUFBSSxFQUFHLE1BQU0sQ0FBQyxNQUFNLElBQUksRUFBRTtRQUMxQixLQUFLLEVBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7S0FDM0QsQ0FBQztJQUVGLFNBQVMsR0FBRyw2QkFBNkIsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyRCxRQUFRLENBQUMsYUFBYSxHQUFHLFdBQVcsQ0FBQyxDQUFDO0lBQ3RDLElBQUksQ0FBQyxXQUFXLEVBQUU7UUFDaEIsT0FBTztLQUNSO0lBQ0QsSUFBSyxFQUFFLEVBQUc7UUFDUixFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxHQUFHLEVBQUUsTUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNqRSxJQUFJLEdBQUcsRUFBRTtnQkFDUCwrQkFBK0I7Z0JBQy9CLDRCQUE0QjtnQkFDNUIsUUFBUSxDQUFDLHdCQUF3QixHQUFHLEdBQUcsQ0FBQyxDQUFDO2dCQUN6QyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDZjtpQkFBTTtnQkFDTCxJQUFJLEtBQUssR0FBRSx1QkFBdUIsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUk7b0JBQzdELDJEQUEyRDtvQkFDM0QsV0FBVztvQkFDWCxjQUFjO29CQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBUyxDQUFDLEVBQUMsTUFBTSxJQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsTUFBTSxHQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFFOUUsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFTLElBQUk7b0JBQ3BDLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUN6QixDQUFDLENBQUMsQ0FBQztnQkFDSCxzRUFBc0U7Z0JBRXRFLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFDLE1BQU0sRUFFdkIsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUU7b0JBQ2QsTUFBTSxFQUFFLENBQUM7b0JBQ1QsSUFBSSxHQUFHLEVBQUU7d0JBQ1AsNkJBQTZCO3dCQUM3QixRQUFRLENBQUMsaUNBQWlDLEdBQUcsR0FBRyxHQUFHLElBQUk7NEJBQ3JELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzt3QkFDbkIsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUNmO3lCQUFNO3dCQUNMLDBCQUEwQjt3QkFDMUIsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztxQkFDdEI7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7YUFDUjtRQUNILENBQUMsQ0FBQyxDQUFDO0tBQ0o7U0FBTTtRQUNMLFFBQVEsQ0FBQyxJQUFJLEVBQUMsSUFBSSxDQUFDLENBQUM7S0FDckI7QUFDSCxDQUFDO0FBbEVELDhCQWtFQztBQUVDLElBQUksT0FBTyxHQUFHLEVBQWdDLENBQUM7QUFFL0MsU0FBZ0IsTUFBTSxDQUFDLElBQVksRUFBRSxLQUFjLEVBQUUsRUFBTztJQUM1RCxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxDQUFDLHlCQUF5QixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNyRSxNQUFNLElBQUksS0FBSyxDQUFDLDBEQUEwRCxDQUFDLENBQUE7S0FDNUU7SUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ2xCLElBQUksT0FBTyxHQUFHO1lBQ1osSUFBSSxFQUFFLElBQUk7WUFDVixLQUFLLEVBQUUsS0FBSztZQUNaLEVBQUUsRUFBRyxFQUFFO1NBQ0csQ0FBQztRQUNiLE9BQU8sQ0FBQyxLQUFLLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN4QyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsT0FBTyxDQUFDO0tBQ3pCO0lBQ0QsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLEtBQUssRUFBRTtRQUNqQyxNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixHQUFHLElBQUksQ0FBQyxDQUFDO0tBQ3BEO0lBQ0QsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDO0FBQzdCLENBQUM7QUFqQkMsd0JBaUJEIiwiZmlsZSI6InV0aWxzL2RpYWxvZ2xvZ2dlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogYSBsb2dnZXIgZm9yIGRpYWxvZyBjb252ZXJzYXRpb25zXG4gKi9cbi8vZGVjbGFyZSBtb2R1bGUgcGcge307XG5cbmltcG9ydCAqIGFzIGJ1aWxkZXIgZnJvbSAnLi4vYm90L2JvdGJ1aWxkZXInO1xuaW1wb3J0ICogYXMgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0ICogYXMgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcblxuXG5leHBvcnQgdmFyIHNxbEFjdGl2ZSA9ICEhKHByb2Nlc3MuZW52LkFCT1RfTE9HREIpO1xuXG5jb25zdCBkZWJ1Z2xvZyA9IGRlYnVnKCdkaWFsb2dsb2dnZXInKTtcblxuaW50ZXJmYWNlIElMb2dnZXIge1xuICBuYW1lOiBzdHJpbmcsXG4gIGRidXJsOiBzdHJpbmcsXG4gIGxvZ0l0PzogKGEgOiBJQW5zd2VyLCBjYWxsYmFjayA6IChlcnIgOiBhbnksIHJlcz8gOiBhbnkpID0+IHZvaWQpID0+IHZvaWQsXG4gIHBnIDogYW55XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIElMb2dFbnRyeSB7XG4gIGJvdGlkIDogc3RyaW5nLCAvKiAxMCAqL1xuICB1c2VyaWQgOiBzdHJpbmcsXG4gIG1lc3NhZ2UgOiBzdHJpbmcsXG4gIHJlc3BvbnNlIDogc3RyaW5nLFxuICBhY3Rpb24gOiBzdHJpbmcsXG4gIGludGVudCA6IHN0cmluZyxcbiAgY29udmVyc2F0aW9uSWQgOiBzdHJpbmcsXG4gIC8qKlxuICAgKiBhbiByZXN1bHRcbiAgICoqL1xuICBtZXRhIDogYW55LFxuICBkZWx0YTogbnVtYmVyXG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIElBbnN3ZXIge1xuICBzZXNzaW9uIDogYnVpbGRlci5TZXNzaW9uLFxuICBpbnRlbnQgOiBzdHJpbmcsXG4gIHJlc3BvbnNlIDogc3RyaW5nLFxuICBhY3Rpb24/IDogc3RyaW5nLFxuICByZXN1bHQ/IDogYW55LFxufVxuXG5jb25zdCBjb2x1bW5zID0gW1wiYm90aWRcIixcInVzZXJpZFwiLCBcIm1lc3NhZ2VcIiwgXCJyZXNwb25zZVwiLCBcImFjdGlvblwiLCBcImludGVudFwiLCBcImNvbnZlcnNhdGlvbklkXCIsIFwibWV0YVwiLCBcImRlbHRhXCJdO1xuLy8gMCBpbmRpY2F0ZXMgZG8gbm90IHByb2Nlc3MgL3RydW5jYXRlLCBlLmcuIG5vbiBzdHJpbmcgdHlwZVxuY29uc3QgY29sdW1uTGVuZ3RocyA9IFsxMCwgNDAsIDEwMjQsIDEwMjQsIDUxMiwgMjAsIDQwLCAwLDAgXTtcblxuXG5leHBvcnQgZnVuY3Rpb24gYXNzdXJlQ29sdW1uTGVuZ3RoTm90RXhjZWVkZWQob2JqIDogSUxvZ0VudHJ5KSA6IElMb2dFbnRyeSB7XG4gIGNvbHVtbnMuZm9yRWFjaChmdW5jdGlvbihzQ29sLGlJbmRleCkge1xuICAgIGlmKGNvbHVtbkxlbmd0aHNbaUluZGV4XSAmJiB0eXBlb2Ygb2JqW3NDb2xdICE9PSAgXCJzdHJpbmdcIikge1xuICAgICAgZGVidWdsb2coXCJVbmV4cGVjdGVkIG5vbi1zdHJpbmcgdmFsdWUgXCIgKyBKU09OLnN0cmluZ2lmeShvYmpbc0NvbF0pKTtcbiAgICAgIG9ialtzQ29sXSA9IFwiXCIrIG9ialtzQ29sXTtcbiAgICB9XG4gICAgaWYob2JqW3NDb2xdICYmIGNvbHVtbkxlbmd0aHNbaUluZGV4XSAmJiBvYmpbc0NvbF0ubGVuZ3RoID4gY29sdW1uTGVuZ3Roc1tpSW5kZXhdKSB7XG4gICAgICBvYmpbc0NvbF0gPSBvYmpbc0NvbF0uc3Vic3RyaW5nKDAsY29sdW1uTGVuZ3Roc1tpSW5kZXhdKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gb2JqO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9nQW5zd2VyKGFuc3dlcjogSUFuc3dlciwgY2FsbGJhY2sgOiAoZXJyOiBhbnksIHJlcz86IGFueSkgPT4gdm9pZCAsIEZvcmNlU3FsQWN0aXZlPyA6IGJvb2xlYW4pIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG4gIGNhbGxiYWNrID0gY2FsbGJhY2sgfHwgKGZ1bmN0aW9uKCkge30pO1xuICB2YXIgc2Vzc2lvbiA9IGFuc3dlci5zZXNzaW9uO1xuICB2YXIgc3FsSXNBY3RpdmUgPSBGb3JjZVNxbEFjdGl2ZSB8fCBzcWxBY3RpdmU7XG4gIHZhciBwZyA9IHRoaXMucGc7XG4gIGRlYnVnbG9nKFwiaGVyZSB1c2VyIGlkIG9mIG1lc3NhZ2Ugc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MgXCIgK1xuICBKU09OLnN0cmluZ2lmeShzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyKSk7XG4gIHZhciBvTG9nRW50cnkgOiBJTG9nRW50cnkgPSB7XG4gICAgYm90aWQgOiB0aGlzLm5hbWUsIFxuICAgIHVzZXJpZDogc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3NcbiAgICAmJiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzcy51c2VyXG4gICAgJiYgc2Vzc2lvbi5tZXNzYWdlLmFkZHJlc3MudXNlciB8fCBcIlwiLFxuICAgIG1lc3NhZ2U6IHNlc3Npb24ubWVzc2FnZS50ZXh0LFxuICAgIHJlc3BvbnNlIDogYW5zd2VyLnJlc3BvbnNlLFxuICAgIGFjdGlvbiA6IGFuc3dlci5hY3Rpb24sXG4gICAgaW50ZW50OiBhbnN3ZXIuaW50ZW50LFxuICAgIGNvbnZlcnNhdGlvbklkOiBzZXNzaW9uLm1lc3NhZ2UuYWRkcmVzc1xuICAgICYmIHNlc3Npb24ubWVzc2FnZS5hZGRyZXNzLmNvbnZlcnNhdGlvbklkIHx8IFwiXCIsXG4gICAgbWV0YSA6IGFuc3dlci5yZXN1bHQgfHwge30sXG4gICAgZGVsdGEgOiBEYXRlLm5vdygpIC0gRGF0ZS5wYXJzZShzZXNzaW9uLm1lc3NhZ2UudGltZXN0YW1wKSxcbiAgfTtcblxuICBvTG9nRW50cnkgPSBhc3N1cmVDb2x1bW5MZW5ndGhOb3RFeGNlZWRlZChvTG9nRW50cnkpO1xuICBkZWJ1Z2xvZyhcInNxbElzQWN0aXZlXCIgKyBzcWxJc0FjdGl2ZSk7XG4gIGlmICghc3FsSXNBY3RpdmUpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCBwZyApIHtcbiAgICBwZy5jb25uZWN0KHRoaXMuZGJ1cmwsIChlcnIsIGNsaWVudCA6IGFueSAvKnBnLkNsaWVudCovLCBwZ0RvbmUpID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgLy8gZmFpbGVkIHRvIGFjcXVpcmUgY29ubmVjdGlvblxuICAgICAgICAvL2xvZ2dlci5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgIGRlYnVnbG9nKCdFcnJvciBjb25uZWN0aW5nIHRvIGRiJyArIGVycik7XG4gICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcXVlcnkgPWBJTlNFUlQgSU5UTyBsb2djb252IChgICsgY29sdW1ucy5qb2luKFwiLFwiKSArIFwiKSBcIiArXG4gICAgICAgIC8vICAgKGNvbnZpZCwgc2Vzc2lvbmlkLCB1c2VyLCBtZXNzYWdlLCByZXNwb25zZSwgbWV0YSkgYCArXG4gICAgICAgIFwiVkFMVUVTICggXCIgICtcbiAgICAgICAgLy8gJDEsICQyLCAuLi5cbiAgICAgICAgY29sdW1ucy5tYXAoZnVuY3Rpb24obyxpSW5kZXgpIHsgcmV0dXJuIFwiJFwiICsgKGlJbmRleCsxKTsgfSkuam9pbihcIiwgXCIpICsgXCIpXCI7XG4gICAgICAgIFxuICAgICAgICB2YXIgdmFsdWVzID0gY29sdW1ucy5tYXAoZnVuY3Rpb24oc0NvbCkge1xuICAgICAgICAgIHJldHVybiBvTG9nRW50cnlbc0NvbF07XG4gICAgICAgIH0pO1xuICAgICAgICAvLyAgW2xldmVsLCBtc2csIG1ldGEgaW5zdGFuY2VvZiBBcnJheSA/IEpTT04uc3RyaW5naWZ5KG1ldGEpIDogbWV0YV0sXG4gICAgICAgIFxuICAgICAgICBjbGllbnQucXVlcnkocXVlcnksdmFsdWVzLFxuICAgICAgICAgIFxuICAgICAgICAgIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgcGdEb25lKCk7XG4gICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgIC8vIGxvZ2dlci5lbWl0KCdlcnJvcicsIGVycik7XG4gICAgICAgICAgICAgIGRlYnVnbG9nKCdFcnJvciBpbnNlcnRpbmcgcmVjb3JkIGludG8gZGIgJyArIGVyciArICdcXG4nICtcbiAgICAgICAgICAgICAgICB2YWx1ZXMuam9pbihcIlxcblwiKSk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyAgbG9nZ2VyLmVtaXQoJ2xvZ2dlZCcpO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHRydWUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjYWxsYmFjayhudWxsLHRydWUpO1xuICB9XG59XG5cbiAgdmFyIGxvZ2dlcnMgPSB7fSBhcyB7IFtrZXk6IHN0cmluZ106IElMb2dnZXIgfTtcbiAgXG4gIGV4cG9ydCBmdW5jdGlvbiBsb2dnZXIobmFtZTogc3RyaW5nLCBkYnVybCA6IHN0cmluZywgcGc6IGFueSkgOiAoYTogSUFuc3dlciwgY2FsbGJhY2s/OiAoZXJyOmFueSwgcmVzPyA6YW55KSA9PiB2b2lkKSA9PiB2b2lkICB7XG4gIGlmICh0eXBlb2YgbmFtZSAhPT0gXCJzdHJpbmdcIiB8fCAhL15bQS1aYS16XVtBLVphLXowLTlfXSskLy5leGVjKG5hbWUpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdMb2dnZXIgbmFtZSBtdXN0IGJlIGF0IGxlYXN0IHR3byBhbHBoYW51bWVyaWMgY2hhcmFjdGVycycpXG4gIH1cbiAgaWYgKCFsb2dnZXJzW25hbWVdKSB7XG4gICAgdmFyIGFsb2dnZXIgPSB7XG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgZGJ1cmw6IGRidXJsLFxuICAgICAgcGcgOiBwZ1xuICAgIH0gYXMgSUxvZ2dlcjtcbiAgICBhbG9nZ2VyLmxvZ0l0ID0gbG9nQW5zd2VyLmJpbmQoYWxvZ2dlcik7XG4gICAgbG9nZ2Vyc1tuYW1lXSA9IGFsb2dnZXI7XG4gIH1cbiAgaWYgKGxvZ2dlcnNbbmFtZV0uZGJ1cmwgIT09IGRidXJsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdGbGFncyBtaXNtYXRjaCBpbiBsb2dnZXInICsgbmFtZSk7XG4gIH1cbiAgcmV0dXJuIGxvZ2dlcnNbbmFtZV0ubG9nSXQ7XG59Il19
