"use strict";
/**
 * this emulates the Microsoft BotBuilder SDK V3.
 */
/**
 * @file
 * @module jfseb.nlq_abot.botbuilder
 * @copyright (c) 2016-2109 Gerd Forstmann
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsoleConnector = exports.IntentDialog = exports.UniversalBot = exports.Prompts = exports.Message = exports.EntityRecognizer = void 0;
class EntityRecognizer {
    static findEntity(entities, type) {
        debugger;
        for (let en of entities) {
            if (en.type == type) {
                return en;
            }
        }
        return undefined;
    }
}
exports.EntityRecognizer = EntityRecognizer;
;
class Message {
    constructor(s) {
        this._theMsg = {
            type: "message",
        };
    }
    toMessage() {
        return this._theMsg;
    }
    ;
    address(adr) {
        this._theMsg.address = adr;
        return this;
    }
    text(txt) {
        this._theMsg.text = txt;
        return this;
    }
    timestamp() {
        this._theMsg.timestamp = new Date().toISOString();
        return this;
    }
    addEntity(o) {
        if (!this._theMsg.entities) {
            this._theMsg.entities = [];
        }
        this._theMsg.entities.push(o);
        return this;
    }
}
exports.Message = Message;
class Prompts {
    static text(session, a) {
    }
}
exports.Prompts = Prompts;
class UniversalBot {
    constructor(connector) {
        this._dialogs = new Map();
        this._connector = connector;
        this._connector.onEvent(this._onEvent.bind(this));
        return this;
    }
    // connector calls handler -> 
    // after analysis we whall call _connector.send(messages, done() ) with result in messages .text 
    _onEvent(msgs) {
        // run messages through all dialogs 
        var self = this;
        this._dialogs.forEach((id, key) => {
            msgs.forEach(msg => id._processMessage(msg, self._connector));
        });
    }
    dialog(path, dialog) {
        this._dialogs.set(path, dialog);
    }
}
exports.UniversalBot = UniversalBot;
class IntentDialog {
    constructor(a) {
        this._matches = new Map();
        this._recognizers = a;
    }
    _processMessage(msg, connector) {
        var Bfound = { found: false };
        var session;
        session = {
            message: msg,
            send(response) {
                if (typeof response == "string") {
                    connector.send([{ text: response }], (a) => { });
                }
                else {
                    connector.send([response.toMessage()], (a) => { });
                }
            }
        };
        this._recognizers.recognizers.forEach((ir) => {
            var irc;
            irc = { message: msg };
            ir.recognize(irc, (err, result) => {
                var intent = result.intent;
                if (result.score > 0.1 && intent !== 'None') {
                    debugger;
                    this._matches.get(intent).forEach(a => a(session, result, () => { }));
                    Bfound.found = true;
                }
            });
        });
        if (!Bfound.found) {
            debugger;
            this._default(session);
        }
    }
    onBegin(cb) {
    }
    onDefault(cb) {
        this._default = cb;
    }
    matches(intent, sess) {
        this._matches.set(intent, sess);
    }
}
exports.IntentDialog = IntentDialog;
const readline = require("readline");
class ConsoleConnector {
    constructor(options) {
        this.processMessage = function (line, id) {
            if (typeof id === 'string') {
                id = {
                    conversationId: id,
                    user: id,
                };
            }
            if (this.handler) {
                var msg = new Message(null)
                    .address(id)
                    .timestamp()
                    .text(line);
                this.handler([msg.toMessage()]);
            }
            return this;
        };
        this.startConversation = function (address, cb) {
            // TODO invoke this at an appropriate time
            var adr = Object.assign({}, address);
            cb(null, adr);
        };
        options = options || {};
        this.stdin = options.stdin || process.stdin;
        this.stdout = options.stdout || process.stdout;
        this.replyCnt = 0;
        this.conversationId = options && options.conversationId || ('' + Date.now());
        return this;
    }
    listen() {
        var self = this;
        var rl = readline.createInterface(this.stdin, this.stdout); // output: this.stdout } );
        this.answerHook = (txt, cmd, conversationId) => {
            console.log(txt);
            if (cmd) {
                console.log("cmd " + JSON.stringify(cmd));
            }
            rl.prompt();
        };
        // forever .... 
        rl.setPrompt(">");
        rl.prompt();
        rl.on('close', () => { process.exit(-1); });
        rl.on('line', (line) => {
            self.processMessage(line, { conversationId: "conv1", user: "nouser" });
        });
        return this;
    }
    setAnswerHook(answerHook, id) {
        if (id) {
            this.answerHooks[id] = answerHook;
        }
        this.answerHook = answerHook;
    }
    ;
    setQuitHook(quitHook) {
        this.quitHook = quitHook;
    }
    ;
    onEvent(handler) {
        this.handler = handler;
    }
    ;
    send(messages, done) {
        for (var i = 0; i < messages.length; i++) {
            if (this.replyCnt++ > 0) {
                //  console.log(' reply ');
            }
            var msg = messages[i];
            if (msg.text) {
                var command = undefined;
                if (msg.entities && msg.entities[0] && msg.entities[0]) {
                    command = msg.entities[0];
                }
                if (msg.address && msg.address.conversationId
                    && this.answerHooks[msg.address.conversationId]) {
                    this.answerHooks[msg.address.conversationId](msg.text, command, msg.address.conversationId);
                }
                else {
                    this.answerHook(msg.text, command, "singletarget");
                }
            }
        }
        done(null);
    }
    ;
}
exports.ConsoleConnector = ConsoleConnector;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
