"use strict";
/**
 * this emulates the Microsoft BotBuilder SDK V3.
 */
/**
 * @file
 * @module jfseb.nlq_abot.botbuilder
 * @copyright (c) 2016-2109 Gerd Forstmann
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.IntentDialog = exports.UniversalBot = exports.Prompts = exports.Message = exports.EntityRecognizer = void 0;
class EntityRecognizer {
    static findEntity(entities, type) {
        debugger;
        for (let en of entities) {
            if (en.type == type) {
                return en;
            }
        }
        return undefined;
    }
}
exports.EntityRecognizer = EntityRecognizer;
;
class Message {
    constructor(s) {
        this._theMsg = {
            type: "message",
            agent: "botbuilder",
            "source": "console"
        };
    }
    toMessage() {
        return this._theMsg;
    }
    ;
    address(adr) {
        this._theMsg.address = adr;
        return this;
    }
    text(txt) {
        this._theMsg.text = txt;
        return this;
    }
    timestamp() {
        this._theMsg.timestamp = new Date().toISOString();
        return this;
    }
    addEntity(o) {
        if (!this._theMsg.entities) {
            this._theMsg.entities = [];
        }
        this._theMsg.entities.push(o);
        return this;
    }
}
exports.Message = Message;
class Prompts {
    static text(session, a) {
    }
}
exports.Prompts = Prompts;
class UniversalBot {
    constructor(connector) {
        this._dialogs = new Map();
        this._connector = connector;
        this._connector.onEvent(this._onEvent.bind(this));
        return this;
    }
    // connector calls handler -> 
    // after analysis we whall call _connector.send(messages, done() ) with result in messages .text 
    _onEvent(msgs) {
        // run messages through all dialogs 
        var self = this;
        this._dialogs.forEach((id, key) => {
            msgs.forEach(msg => id._processMessage(msg, self._connector));
        });
    }
    dialog(path, dialog) {
        this._dialogs.set(path, dialog);
    }
}
exports.UniversalBot = UniversalBot;
class IntentDialog {
    constructor(a) {
        this._matches = new Map();
        this._recognizers = a;
    }
    _processMessage(msg, connector) {
        var Bfound = { found: false };
        var session;
        session = {
            message: msg,
            send(response) {
                if (typeof response == "string") {
                    connector.send([{ text: response }], (a) => { });
                }
                else {
                    connector.send([response.toMessage()], (a) => { });
                }
            }
        };
        this._recognizers.recognizers.forEach((ir) => {
            var irc;
            irc = { message: msg };
            ir.recognize(irc, (err, result) => {
                var intent = result.intent;
                if (result.score > 0.1 && intent !== 'None') {
                    debugger;
                    this._matches.get(intent).forEach(a => a(session, result, () => { }));
                    Bfound.found = true;
                }
            });
        });
        if (!Bfound.found) {
            debugger;
            this._default(session);
        }
    }
    onBegin(cb) {
    }
    onDefault(cb) {
        this._default = cb;
    }
    matches(intent, sess) {
        this._matches.set(intent, sess);
    }
}
exports.IntentDialog = IntentDialog;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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b0JBQ1QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBQyxNQUFNLEVBQUUsR0FBRSxFQUFFLEdBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQztvQkFDcEUsTUFBTSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7aUJBQ3JCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUNILElBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQ2xCLFFBQVEsQ0FBQztZQUNULElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBRUQsT0FBTyxDQUFFLEVBQThCO0lBRXZDLENBQUM7SUFFRCxTQUFTLENBQUUsRUFBK0I7UUFDeEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7SUFDckIsQ0FBQztJQUVELE9BQU8sQ0FBRSxNQUFjLEVBQUUsSUFBeUI7UUFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Q0FDRjtBQXJERCxvQ0FxREMiLCJmaWxlIjoiYm90L2JvdGJ1aWxkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHRoaXMgZW11bGF0ZXMgdGhlIE1pY3Jvc29mdCBCb3RCdWlsZGVyIFNESyBWMy4gXG4gKi9cbi8qKlxuICogQGZpbGVcbiAqIEBtb2R1bGUgamZzZWIubmxxX2Fib3QuYm90YnVpbGRlclxuICogQGNvcHlyaWdodCAoYykgMjAxNi0yMTA5IEdlcmQgRm9yc3RtYW5uXG4gKi9cblxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHsgc2VuZCB9IGZyb20gJ3Byb2Nlc3MnO1xuXG5pbnRlcmZhY2UgQm90QnVpbGRlciB7XG5cbn1cblxuaW50ZXJmYWNlIENvbnZlcnNhdGlvbiB7XG4gIGlkIDogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFVzZXIge1xuICBpZCA6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCb3Qge1xuICBpZCA6IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRW50aXR5IHtcbiAgc3RhcnRJbmRleCA6IG51bWJlcjtcbiAgZW50aXR5IDogc3RyaW5nO1xuICB0eXBlIDogc3RyaW5nO1xuICBlbmRJbmRleCA6IG51bWJlcjtcbiAgc2NvcmUgOiBudW1iZXI7XG59XG5cbmV4cG9ydCBjbGFzcyBFbnRpdHlSZWNvZ25pemVyIHtcbiAgc3RhdGljIGZpbmRFbnRpdHkoZW50aXRpZXM6IElFbnRpdHlbXSwgdHlwZTogc3RyaW5nKSA6IGFueSB7XG4gICAgZGVidWdnZXI7XG4gICAgZm9yKGxldCBlbiBvZiBlbnRpdGllcykge1xuICAgICAgaWYoZW4udHlwZSA9PSB0eXBlICkge1xuICAgICAgICByZXR1cm4gZW47XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlY29nbml6ZUNvbnRleHQge1xuICBtZXNzYWdlIDogSU1lc3NhZ2U7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUludGVudFJlY29nbml6ZXJSZXN1bHQge1xuICBpbnRlbnQgOiBzdHJpbmc7IFxuICBzY29yZSA6IG51bWJlcjtcbiAgZW50aXRpZXMgOiBJRW50aXR5W107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUludGVudFJlY29nbml6ZXIge1xuICByZWNvZ25pemUoY29udGV4dDogSVJlY29nbml6ZUNvbnRleHQsIGNhbGxiYWNrOiAoZXJyOiBFcnJvciwgcmVzdWx0OiBJSW50ZW50UmVjb2duaXplclJlc3VsdCkgPT4gdm9pZCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWRkcmVzcyB7XG4gIGJvdDogQm90O1xuICBjb252ZXJzYXRpb246IENvbnZlcnNhdGlvbjtcbiAgdXNlciA6IFVzZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1lc3NhZ2Uge1xuICBhZGRyZXNzIDogQWRkcmVzcztcbiAgdHlwZT86c3RyaW5nO1xuICBhZ2VudD8gOiBzdHJpbmc7XG4gIHNvdXJjZTogc3RyaW5nO1xuICB0ZXh0IDogc3RyaW5nO1xuICB0aW1lc3RhbXAgOiBzdHJpbmc7XG4gIGVudGl0aWVzPyA6IHN0cmluZ1tdO1xufVxuXG5leHBvcnQgY2xhc3MgTWVzc2FnZSB7XG4gIF90aGVNc2cgOiBJTWVzc2FnZTtcbiAgY29uc3RydWN0b3IoczogU2Vzc2lvbikgeyBcbiAgICB0aGlzLl90aGVNc2cgPSB7XG4gICAgICB0eXBlIDogXCJtZXNzYWdlXCIsXG4gICAgICBhZ2VudDpcImJvdGJ1aWxkZXJcIiwgXG4gICAgXCJzb3VyY2VcIiA6IFwiY29uc29sZVwiIH0gYXMgSU1lc3NhZ2U7XG4gIH1cbiAgdG9NZXNzYWdlKCkgOiBJTWVzc2FnZSB7XG4gICAgcmV0dXJuIHRoaXMuX3RoZU1zZzsgXG4gIH07XG4gIGFkZHJlc3MoYWRyOiBBZGRyZXNzKSA6IE1lc3NhZ2Uge1xuICAgIHRoaXMuX3RoZU1zZy5hZGRyZXNzID0gYWRyO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIHRleHQodHh0OnN0cmluZykgOiBNZXNzYWdlIHtcbiAgICB0aGlzLl90aGVNc2cudGV4dCA9IHR4dDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICB0aW1lc3RhbXAoKSA6IE1lc3NhZ2Uge1xuICAgIHRoaXMuX3RoZU1zZy50aW1lc3RhbXAgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgYWRkRW50aXR5KG8gOiBhbnkpIDogTWVzc2FnZSB7XG4gICAgaWYgKCAhdGhpcy5fdGhlTXNnLmVudGl0aWVzICkge1xuICAgICAgdGhpcy5fdGhlTXNnLmVudGl0aWVzID0gW107XG4gICAgfVxuICAgIHRoaXMuX3RoZU1zZy5lbnRpdGllcy5wdXNoKG8pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbnR5cGUgc3RyaW5nT3JNZXNzYWdlID0gc3RyaW5nIHwgTWVzc2FnZTtcblxuZXhwb3J0IGNsYXNzIFByb21wdHMge1xuICBzdGF0aWMgdGV4dChzZXNzaW9uOiBTZXNzaW9uLCBhOnN0cmluZykgOiB2b2lkIHtcbiAgfVxufVxuXG5cbi8vIGF0IHRoZSBlbmQgaW52b2tlIHNlbmQobWVzc2FnZXMsIGRvbmUpIG9uIHRoZSBjb25uZWN0b3IgXG4vLyBcblxuZXhwb3J0IGludGVyZmFjZSBFbmREaWFsb2dBcmcge1xuICByZXNwb25zZSA6IGFueTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVc2VyRGF0YSB7XG4gIGNvdW50IDogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlc3Npb24ge1xuICBtZXNzYWdlIDogSU1lc3NhZ2U7XG4gIGRpYWxvZ0RhdGEgOiBhbnk7XG4gIHVzZXJEYXRhIDogVXNlckRhdGE7XG4gIHNlbmQoYXJnIDogc3RyaW5nT3JNZXNzYWdlKSA6IHZvaWQ7XG4gIGVuZERpYWxvZ1dpdGhSZXN1bHQoIGFyZyA6IEVuZERpYWxvZ0FyZyk7XG4gIGJlZ2luRGlhbG9nKG1hdGNoOiBzdHJpbmcsIGE6IG51bWJlcik7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbm5lY3RvciB7XG4gIG9uRXZlbnQoIGZuOiAobXNnczogSU1lc3NhZ2VbXSkgPT4gdm9pZCApIDogdm9pZDsgXG4gIHNlbmQobWVzc2FnZXM6IElNZXNzYWdlW10sZm46IChhOmFueSkgPT4gdm9pZCk7XG59XG5cbmV4cG9ydCBjbGFzcyBVbml2ZXJzYWxCb3Qge1xuICBfZGlhbG9ncyA6IE1hcDxzdHJpbmcsSW50ZW50RGlhbG9nPjsgXG4gIF9jb25uZWN0b3IgOiBJQ29ubmVjdG9yO1xuXG4gIC8vIGNvbm5lY3RvciBjYWxscyBoYW5kbGVyIC0+IFxuICAvLyBhZnRlciBhbmFseXNpcyB3ZSB3aGFsbCBjYWxsIF9jb25uZWN0b3Iuc2VuZChtZXNzYWdlcywgZG9uZSgpICkgd2l0aCByZXN1bHQgaW4gbWVzc2FnZXMgLnRleHQgXG5cbiAgX29uRXZlbnQoIG1zZ3M6IElNZXNzYWdlW10gKSA6IHZvaWQge1xuICAgIC8vIHJ1biBtZXNzYWdlcyB0aHJvdWdoIGFsbCBkaWFsb2dzIFxuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICB0aGlzLl9kaWFsb2dzLmZvckVhY2goIChpZDpJbnRlbnREaWFsb2csIGtleTogc3RyaW5nKSA9PntcbiAgICAgIG1zZ3MuZm9yRWFjaCggbXNnID0+IGlkLl9wcm9jZXNzTWVzc2FnZShtc2csIHNlbGYuX2Nvbm5lY3RvciApKTtcbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCBjb25uZWN0b3I6IElDb25uZWN0b3IpIHtcbiAgICB0aGlzLl9kaWFsb2dzID0gbmV3IE1hcDxzdHJpbmcsSW50ZW50RGlhbG9nPigpO1xuICAgIHRoaXMuX2Nvbm5lY3RvciA9IGNvbm5lY3RvcjtcbiAgICB0aGlzLl9jb25uZWN0b3Iub25FdmVudCh0aGlzLl9vbkV2ZW50LmJpbmQodGhpcykpXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkaWFsb2cocGF0aDogc3RyaW5nLCBkaWFsb2cgOiBJbnRlbnREaWFsb2cpIHtcbiAgICB0aGlzLl9kaWFsb2dzLnNldChwYXRoLGRpYWxvZyk7XG4gIH1cbn1cblxuXG5cbnR5cGUgQ29udGludWVGdW5jdGlvbiA9IChzZXNzaW9uOlNlc3Npb24sIGFyZ3M6YW55LCBuZXh0OiAoKT0+dm9pZCkgPT4gdm9pZFxuXG5leHBvcnQgY2xhc3MgSW50ZW50RGlhbG9nIHtcblxuICBfZGVmYXVsdCA6IChzZXNzaW9uOlNlc3Npb24pPT4gdm9pZDtcbiAgX21hdGNoZXMgOiBNYXA8c3RyaW5nLCBDb250aW51ZUZ1bmN0aW9uW10+O1xuICBfcmVjb2duaXplcnMgOiB7cmVjb2duaXplcnMgOiBJSW50ZW50UmVjb2duaXplcltdfTtcblxuICBjb25zdHJ1Y3RvciggYSA6IHtyZWNvZ25pemVycyA6IElJbnRlbnRSZWNvZ25pemVyW119KSB7XG4gICAgdGhpcy5fbWF0Y2hlcyA9IG5ldyBNYXA8c3RyaW5nLCBDb250aW51ZUZ1bmN0aW9uW10+KCk7XG4gICAgdGhpcy5fcmVjb2duaXplcnMgPSBhO1xuICB9XG5cbiAgX3Byb2Nlc3NNZXNzYWdlKCBtc2c6IElNZXNzYWdlLCBjb25uZWN0b3I6IElDb25uZWN0b3IgKSB7XG4gICAgdmFyIEJmb3VuZCA9IHsgZm91bmQgOiBmYWxzZX07IFxuICAgIHZhciBzZXNzaW9uIDogU2Vzc2lvbjtcbiAgICBzZXNzaW9uID0ge1xuICAgICAgbWVzc2FnZSA6IG1zZyxcbiAgICAgIHNlbmQocmVzcG9uc2UgOiBzdHJpbmdPck1lc3NhZ2UpIDp2b2lkIHtcbiAgICAgICAgaWYgKCB0eXBlb2YgcmVzcG9uc2UgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgIGNvbm5lY3Rvci5zZW5kKCBbeyB0ZXh0IDogcmVzcG9uc2UgfSBhcyBJTWVzc2FnZV0sIChhOmFueSk9Pnt9KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbm5lY3Rvci5zZW5kKCBbcmVzcG9uc2UudG9NZXNzYWdlKCldLCAoYTphbnkpPT57fSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gYXMgU2Vzc2lvbjtcbiAgICB0aGlzLl9yZWNvZ25pemVycy5yZWNvZ25pemVycy5mb3JFYWNoKCAoaXIpID0+IHtcbiAgICAgIHZhciBpcmM6IElSZWNvZ25pemVDb250ZXh0O1xuICAgICAgaXJjID0geyBtZXNzYWdlOiBtc2cgfTtcbiAgICAgIGlyLnJlY29nbml6ZSggaXJjLCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgdmFyIGludGVudCA9IHJlc3VsdC5pbnRlbnQ7XG4gICAgICAgIGlmICggcmVzdWx0LnNjb3JlID4gMC4xICYmIGludGVudCAhPT0gJ05vbmUnKSB7XG4gICAgICAgICAgZGVidWdnZXI7XG4gICAgICAgICAgdGhpcy5fbWF0Y2hlcy5nZXQoaW50ZW50KS5mb3JFYWNoKCBhID0+IGEoc2Vzc2lvbixyZXN1bHQsICgpPT57fSkgKTtcbiAgICAgICAgICBCZm91bmQuZm91bmQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBpZiAoICFCZm91bmQuZm91bmQpIHtcbiAgICAgIGRlYnVnZ2VyO1xuICAgICAgdGhpcy5fZGVmYXVsdChzZXNzaW9uKTtcbiAgICB9XG4gIH1cblxuICBvbkJlZ2luKCBjYjogKHNlc3Npb246IFNlc3Npb24pID0+IHZvaWQpIDogdm9pZCB7XG5cbiAgfVxuXG4gIG9uRGVmYXVsdCggY2IgOiAoc2Vzc2lvbjogU2Vzc2lvbikgPT4gdm9pZCApIHtcbiAgICB0aGlzLl9kZWZhdWx0ID0gY2I7XG4gIH1cblxuICBtYXRjaGVzKCBpbnRlbnQ6IHN0cmluZywgc2VzcyA6IENvbnRpbnVlRnVuY3Rpb25bXSApIDogdm9pZCB7XG4gICAgdGhpcy5fbWF0Y2hlcy5zZXQoaW50ZW50LCBzZXNzKTtcbiAgfVxufSJdfQ==
