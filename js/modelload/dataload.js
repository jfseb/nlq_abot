"use strict";
/**
 * Functionality to load data into a srcHandle model
 * (c) gerd forstmann 2017
 *
 * @file
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadModelData = exports.getModel = exports.createDB = exports.cmpTools = void 0;
//import * as intf from 'constants';
const debug = require("debugf");
var debuglog = debug('model');
const FUtils = require("../model/model");
//import {Mongoose as Mongoose} from 'srcHandle';
const srcHandle = require("srcHandle");
srcHandle.Promise = global.Promise;
/**
 * WATCH out, this instruments srcHandle!
 */
require('srcHandle-schema-jsonschema')(srcHandle);
/**
 * the model path, may be controlled via environment variable
 */
//var envModelPath = process.env["ABOT_MODELPATH"] || "node_modules/abot_testmodel/testmodel";
function cmpTools(a, b) {
    return a.name.localeCompare(b.name);
}
exports.cmpTools = cmpTools;
const SchemaLoad = require("./schemaload");
const MongoUtils = require("../utils/mongo");
/**
 * Create Database (currently does not drop database before!)
 * @param srcHandle {ISrcHandle} srcHandle instance ( or mock for testing)
 * @param mongoConnectionString {string}  connectionstring, method will connect and disconnect
 * (currenlty disconnnect only on success, subject to change)
 * @param modelPath {string} modepath to read data from
 */
function createDB(srcHandle, mongoConnectionString, modelPath) {
    if (modelPath[modelPath.length - 1] === "\\" || modelPath[modelPath.length - 1] === "/") {
        throw new Error(`modelpath should be w.o. trailing "/" or "\\", was ${modelPath} `);
    }
    /**
    * WATCH out, this instruments srcHandle!
    */
    require('srcHandle-schema-jsonschema')(srcHandle);
    return MongoUtils.openMongoose(srcHandle, mongoConnectionString).then(() => SchemaLoad.createDBWithModels(srcHandle, modelPath)).then(() => {
        var models = SchemaLoad.loadModelNames(modelPath);
        return Promise.all(models.map(modelName => loadModelData(srcHandle, modelPath, modelName)));
    }).then(() => {
        MongoUtils.disconnectReset(srcHandle);
    });
}
exports.createDB = createDB;
function getModel(srcHandle, modelName, modelPath) {
    if (srcHandle.models[modelName]) {
        console.log(` got model for ${modelName} `);
        return Promise.resolve(srcHandle.models[modelName]);
    }
    console.log(` no model found for ${modelName} `);
    var Eschema = srcHandle.models['mongonlq_eschemas'];
    if (!Eschema) {
        throw new Error('this database does not have an eschema model initialized');
    }
    return SchemaLoad.makeModelFromDB(srcHandle, modelName);
}
exports.getModel = getModel;
function loadModelData(srcHandle, modelPath, modelName) {
    var data = FUtils.readFileAsJSON(modelPath + '/' + modelName + '.data.json');
    var cnt = 0;
    // load the schema, either from database or from file system
    return getModel(srcHandle, modelName, modelPath).then(oModel => {
        console.log('** got a model to load: ' + oModel.modelName);
        return Promise.all(data.map((oRecord, index) => {
            try {
                return SchemaLoad.validateDoc(oModel.modelName, oModel.schema, oRecord);
            }
            catch (err) {
                console.log('error validation object ' + modelName + ' record #' + index);
                throw err;
            }
        })).then(() => { return oModel; });
    }).then(oModel2 => {
        return Promise.all(data.map((oRecord, index) => SchemaLoad.validateDocMongoose(srcHandle, oModel2.modelName, oModel2.schema, oRecord))).then(() => { return oModel2; });
    }).then((oModel) => {
        return oModel.deleteMany({}).then(() => oModel)
            .then(oModel => {
            return Promise.all(data.map(doc => {
                var oDoc = new oModel(doc);
                return oDoc.save().then(a => { ++cnt; }).catch(err => console.log("error inserting " + err + "  inserting : " + JSON.stringify(doc) + ""));
            }));
        }).then(() => oModel);
    }).then(oModel => {
        console.log(`inserted ${cnt} documents for domain ${modelName}`);
    }).catch(err => {
        console.log(`error inserting documents for domain ${modelName}\n` + err + err.stack);
    });
}
exports.loadModelData = loadModelData;
srcHandle.Promise = global.Promise;
function deleteAll(model) {
    return model.collection.drop();
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
